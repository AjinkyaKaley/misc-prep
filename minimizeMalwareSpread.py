import collections

class Solution:
    def minMalwareSpread(self, graph, initial):
        n = len(graph)
        parents = dict()
        for i in range(n):
            parents[i] = i

        def find(x):
            if x != parents[x]:
                parents[x] = find(parents[x])
            return parents[x]

        def union(x, y):
            parents[find(x)] = find(y)
        # init
        
        # union
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    union(i, j)
        area = collections.Counter(find(i) for i in range(n))
        malware = collections.Counter(find(i) for i in initial)
        save, res = 0, min(initial)
        for i in initial:
            _p = find(i)
            if malware[_p] == 1:
                if area[_p] > save:
                    save, res = area[_p], i
                elif area[_p] == save:
                    res = min(res, i)
        return res
        # return min(initial, key=lambda i: [(malware[find(i)] == 1) * -area[find(i)], i])

sln = Solution()
print(sln.minMalwareSpread([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1]],
                           [5, 0]))
